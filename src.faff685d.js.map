{"version":3,"sources":["src/trie.js","src/index.js"],"names":["Trie","letter","word","nodes","isWord","length","addWord","slice","tail","result","node","res","searchWord","push","Object","keys","forEach","element","trie","words","replaceAll","toLowerCase","split","n","console","log","document","getElementById","innerHTML"],"mappings":"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","file":"src.faff685d.js","sourceRoot":"..","sourcesContent":["class Trie {\r\n  constructor(letter, word) {\r\n    this.nodes = {};\r\n    if (!letter) return;\r\n    this.isWord = word.length === 0;\r\n    this.letter = letter;\r\n    if (word.length > 0) this.addWord(word.slice());\r\n  }\r\n\r\n  addWord(word) {\r\n    if (word.length < 1) return;\r\n    const letter = word[0];\r\n    \r\n    // console.log(\"word is being added\");\r\n\r\n    if (!this.nodes[letter]) {\r\n      this.nodes[letter] = new Trie(letter, word.slice(1));\r\n    } else {\r\n      this.nodes[letter].addWord(word.slice(1));\r\n    }\r\n  }\r\n\r\n  searchWord(word, tail = \"\") {\r\n    // console.log(word, tail);\r\n    const result = [];\r\n\r\n    if (!word) {\r\n      if (this.isWord) {\r\n        result.push(tail);\r\n      }\r\n\r\n      Object.keys(this.nodes).forEach((element) => {\r\n        result.push(\r\n          ...this.nodes[element].searchWord(\r\n            \"\",\r\n            tail + this.nodes[element].letter\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      const node = this.nodes[word[0]];\r\n      if (node) {\r\n        const res = this.nodes[word[0]].searchWord(\r\n          word.slice(1),\r\n          tail + node.letter\r\n        );\r\n\r\n        result.push(...res);\r\n      }\r\n    }\r\n    // console.log(this.letter, result)\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Trie;\r\n","import \"./styles.css\";\nimport Trie from \"./trie\";\n\nconst trie = new Trie(\"\");\nconst words = `In computer programming, reflection is the ability of a program to manipulate variables, properties, and methods of objects at runtime.\nrior to ES6, JavaScript already has reflection features even though they were not officially called that by the community or the specification. For example, methods like Object.keys(), Object.getOwnPropertyDescriptor(), and Array.isArray() are the classic reflection features.\nES6 introduces a new global object called Reflect that allows you to call methods, construct objects, get and set properties, manipulate and extend properties.\nThe Reflect API is important because it allows you to develop programs and frameworks that are able to handle dynamic code.`\n  .replaceAll(\".\", \"\")\n  .replaceAll(\",\", \"\")\n  .toLowerCase()\n  .split(\" \");\n\nfor (let n of words){\n  trie.addWord(n)\n}\nconsole.log(trie)\nconsole.log(trie.searchWord('pr'))\n  \n\ndocument.getElementById(\"app\").innerHTML = words;\n"]}